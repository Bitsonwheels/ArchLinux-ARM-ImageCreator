#!/usr/bin/bash

CFG_FILE=config.conf
CFG_CONTENT=$(cat $CFG_FILE | sed -r '/[^=]+=[^=]+/!d' | sed -r 's/\s+=\s/=/g')
eval "$CFG_CONTENT"

export PATH="/usr/local/sbin:/usr/sbin:/sbin:$PATH"
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8

# set text color constants 
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
MAGENTA="\e[35m"
BOLDGREEN="\e[1;${GREEN}m"
BOLDRED="\e[1;${RED}m"
REDBACKGROUND="\e[41m"
GREENBACKGROUND="\e[42m"
YELLOWBACKGROUND="\e[43m"
ENDCOLOR="\e[0m"

# Set up script error handling see https://disconnected.systems/blog/another-bash-strict-mode for details
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'

echo "▄▖____▌_▖_▘________▄▖▄▖▖__▖__▄▖___________▄▖______▗_____";
echo "▌▌▛▘▛▘▛▌▌_▌▛▌▌▌▚▘▄▖▌▌▙▘▛▖▞▌__▐_▛▛▌▀▌▛▌█▌__▌_▛▘█▌▀▌▜▘▛▌▛▘";
echo "▛▌▌_▙▖▌▌▙▖▌▌▌▙▌▞▖__▛▌▌▌▌▝_▌__▟▖▌▌▌█▌▙▌▙▖__▙▖▌_▙▖█▌▐▖▙▌▌_";
echo "____________________________________▄▌__________________";

echo -e "${REDBACKGROUND} ==> Creates an Arch Linux ARM image e.g. for installation to an SD card. ${ENDCOLOR}"

# Ensure we are root
if [[ $EUID -ne 0 ]]; then
  echo -e "${RED} This script must be run as root! ${ENDCOLOR}"
  exit 1
fi

# Some useful constants
mount="mnt" # Local directory to mount the image (automatically created/delete as needed)
base_url="http://archlinuxarm.org/os"

# Grab the first two arguments, using the defaults if not set
# For example, to create a 4 gig image called archlinux-rpi-armv7.img
# that automatically runs ./setup1 and ./setup2 inside the new root, use:
#
#   ./create-image 4G rpi-armv7 ./setup1 ./setup2
#

if [ $# -lt 2 ]; then
  echo "Usage: $0 <size> <arch> <setup scripts...>"
  exit 1
fi

size="$1"
shift

arch="$1"
shift

file="ArchLinuxARM-${arch}-latest.tar.gz"
image="archlinux-${arch}.img"
mirrorscript="fastestmirror.sh"
URL="https://aur.archlinux.org/yay-bin.git"
STAGING_PATH="/usr/src/yay-bin"
locales="en_US.UTF-8"

# Local setup script to run inside the image
script_sources=("$@")
script_destdir="/setup-scripts"
script_destdir2="/etc/init.d"
loopdev=

# Tasks to run when the shell exits for any reason, unmount the image and
# general cleanup
echo -e "\e[1;33m ==> Tasks to run when the shell exits for any reason, unmount the image and general cleanup... \e[0m"
cleanup() {
  rm -rf "${mount}${script_destdir}"
  if [[ -d "${mount}" ]]; then
    umount -R "${mount}" || true
    rmdir "${mount}" || true
  fi
  [ -n "${loopdev}" ] && losetup --detach "${loopdev}" || true
}
trap cleanup EXIT

echo -e "\e[1;96m ==> Downloading Arch Linux ARM tarball (${file})... \e[0m"
#[ ! -f "${file}" ] && wget --quiet "${base_url}/${file}"
[ ! -f "${file}" ] && curl -LO "${base_url}/${file}"

echo -e "\e[1;96m ==> Creating image... \e[0m"
dd if=/dev/zero of="${image}" bs=1 seek="${size}" count=0
loopdev=$(losetup --find --show "${image}")

echo -e "\e[1;33m ==> Partitioning image... \e[0m"
parted --script "${loopdev}" mklabel msdos
parted --script "${loopdev}" mkpart primary fat32 0% 200M
parted --script "${loopdev}" mkpart primary ext4 200M 100%

echo -e "\e[1;33m ==> Formatting image...  \e[0m"
bootdev=$(ls "${loopdev}"*1)
rootdev=$(ls "${loopdev}"*2)

# Format with f2fs
#mkfs.vfat -I -n SYSTEM ${bootdev}
#mkfs.f2fs -f -l root ${rootdev}

# Format with ext4
mkfs.vfat -I -n SYSTEM ${bootdev}
mkfs.ext4 -F -L root -b 4096 -E stride=4,stripe_width=1024 ${rootdev}

echo -e "\e[1;33m ==> Mounting image...  \e[0m"
[ ! -d "${mount}" ] && mkdir "${mount}"
mount "${rootdev}" "${mount}"
[ ! -d "${mount}/boot" ] && mkdir "${mount}/boot"
mount "${bootdev}" "${mount}/boot"

echo -e "\e[1;96m ==> Installing Arch Linux ARM root tree to image...  \e[0m"
tar -xpf "${file}" -C "${mount}" 2> >(grep -v "Ignoring unknown extended header keyword")

echo -e "\e[1;96m ==> Installing overlay tree to image...  \e[0m"
rsync -rlDvP "$(dirname $0)/overlay/" "${mount}/"

echo -e "\e[1;96m ==> Setting up pacman keyring...  \e[0m"

cat <<EOF | arch-chroot "${mount}"
  pacman-key --init
  pacman-key --populate archlinuxarm
EOF

echo -e "\e[1;96m==> Setting up setup scripts dir...  \e[0m"
mkdir "${mount}${script_destdir}"

echo -e "\e[1;93m==> Run mirrorscript scripts inside new root...  \e[0m"
  script_dest="${script_destdir}/$(basename "$mirrorscript")"
  
echo -e "\e[1;96m==> Installing $mirrorscript to $script_dest in new root...  \e[0m"
  install -Dm755 "$mirrorscript" "${mount}${script_dest}"
  
echo -e "\e[1;93m==> Running $script_dest...  \e[0m"
  sudo arch-chroot "${mount}" "${script_dest}"

echo -e "\e[1;96m==> Setting up Tools and needed Apps...  \e[0m"
echo -e "\e[1;46m==> Coffee break!? That might take a while.  \e[0m"

cat <<EOF | arch-chroot "${mount}" 
  pacman -Syu --noconfirm --needed vim git sudo dpkg go python base-devel devtools unzip wget mc gcc cmake f2fs-tools lsb-release fakeroot python-setuptools python-pip python-pipx tk arch-install-scripts
EOF

echo -e "\e[0;96m" "==> Configure system locale to en_US.UTF-8...  \e[0m"

# Configure system locale to en_US.UTF-8
  arch-chroot "${mount}" sed -i 's/#\(en_US.UTF-8 UTF-8\)/\1/g' /etc/locale.gen
  arch-chroot "${mount}" locale-gen
  arch-chroot "${mount}" echo 'LANG=en_US.UTF-8' > /etc/locale.conf
  arch-chroot "${mount}" echo 'LANG="en_US.UTF-8"' > /etc/environment
  arch-chroot "${mount}" echo 'LC_ALL=“en_US.UTF-8”' > /etc/environment
  
echo -e "\e[0;44m" "==> Setting up service for expanding fs on first boot...  \e[0m"
  cat <<EOF | arch-chroot "${mount}"
  systemctl enable expand-rootfs
EOF
  
echo -e "\e[0;44m" "==> Setting up the alarm user...  \e[0m"
  groupadd -g 999 sudo && useradd -u 999 -g alarm -G sudo -m -s /bin/bash alarm && \
  sed -i /etc/sudoers -re 's/^%sudo.*/%sudo ALL=(ALL:ALL) NOPASSWD: ALL/g' && \
  sed -i /etc/sudoers -re 's/^root.*/root ALL=(ALL:ALL) NOPASSWD: ALL/g' && \
  sed -i /etc/sudoers -re 's/^#includedir.*/## **Removed the include directive** ##"/g' && \
  echo "alarm ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
  echo "Customized the sudoers file for passwordless access to the alarm user!" && \
  echo "alarm user:";  su - alarm -c id

# Run setup scripts inside new root
for script in "${script_sources[@]}"; do
  script_dest="${script_destdir}/$(basename "$script")"

  echo "==> Installing $script to $script_dest in new root..."
  install -Dm755 "$script" "${mount}${script_dest}"
  echo "==> Installing resize2fs to $script_destdir2 in new root..."
  install -Dm755 "resize2fs_once" "${mount}${script_destdir2}"
  echo "==> Running $script_dest..."
  arch-chroot "${mount}" "${script_dest}"
  echo "==> Removing $script_dest from new root..."
  rm "${mount}${script_dest}"

done

echo "==> Cleaning pacman cache..."
cat <<EOF | arch-chroot "${mount}"
yes | pacman -Scc

EOF

echo "▄▖____________________________▗____▌________________▐▘__▜_▜_____";
echo "▐_▛▛▌▀▌▛▌█▌__▌▌▌▀▌▛▘__▛▘▛▘█▌▀▌▜▘█▌▛▌__▛▘▌▌▛▘▛▘█▌▛▘▛▘▜▘▌▌▐_▐_▌▌__";
echo "▟▖▌▌▌█▌▙▌▙▖__▚▚▘█▌▄▌__▙▖▌_▙▖█▌▐▖▙▖▙▌__▄▌▙▌▙▖▙▖▙▖▄▌▄▌▐_▙▌▐▖▐▖▙▌▗_";
echo "_______▄▌___________________________________________________▄▌__";